<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RedWolfChao Blog</title>
  <subtitle>沉默是金</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://joryhe.coding.me/"/>
  <updated>2017-05-10T09:37:32.439Z</updated>
  <id>http://joryhe.coding.me/</id>
  
  <author>
    <name>RedWolfChao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安卓移动逆向(四)-Smail_HelloWorld</title>
    <link href="http://joryhe.coding.me/post/%E5%AE%89%E5%8D%93%E7%A7%BB%E5%8A%A8%E9%80%86%E5%90%91(%E5%9B%9B)-Smail_HelloWorld.html"/>
    <id>http://joryhe.coding.me/post/安卓移动逆向(四)-Smail_HelloWorld.html</id>
    <published>2017-05-08T10:18:18.000Z</published>
    <updated>2017-05-10T09:37:32.439Z</updated>
    
    <content type="html"><![CDATA[<p>###着手编写一个Smail类型的HelloWord###</p>
<p><strong>开始编写</strong></p>
<p><strong>不要直接复制,要一个一个字符敲,否则没有意义!!</strong><br><strong>不要直接复制,要一个一个字符敲,否则没有意义!!!!</strong><br><strong>不要直接复制,要一个一个字符敲,否则没有意义!!!!!!</strong></p>
<figure class="highlight smali"><table><tr><td class="code"><pre><div class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">LHelloWorld;</span>	<span class="comment">#定义类名</span></div><div class="line"><span class="keyword">.super</span> <span class="class">Ljava/lang/Object;</span>	<span class="comment">#定义父类</span></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> main&#123;[<span class="class">Ljava/lang/String;</span>&#125;V	<span class="comment">#声明main()&lt;主函数&gt;</span></div><div class="line">	.registers 4	<span class="comment">#程序中使用v0,v1,v2寄存器与一个参数寄存器</span></div><div class="line">	.prologue	<span class="comment">#代码起始指令</span></div><div class="line"><span class="built_in">	return-void	</span><span class="comment">#没有返回值void</span><span class="keyword"></span></div><div class="line">	.end method</div></pre></td></tr></table></figure>
<p><strong>这是一段HelloWorld的架构代码,定义了一个可编译运行的DEX文件的最小组成部分,下面我们将在.prologue(代码起始指令)下编写具体代码:</strong></p>
<figure class="highlight smali"><table><tr><td class="code"><pre><div class="line"><span class="comment">#空指令</span><span class="built_in"></span></div><div class="line">nop</div><div class="line">nop<span class="built_in"></span></div><div class="line">nop</div><div class="line"><span class="comment">#数据定义指令</span><span class="built_in"></span></div><div class="line">const/16 v0, 0x8	<span class="comment">#v0=0x8</span><span class="built_in"></span></div><div class="line">const/4 v1, 0x5		<span class="comment">#v1=0v5</span><span class="built_in"></span></div><div class="line">const/4 v2, 0x3		<span class="comment">#v2=0x3</span></div><div class="line"><span class="comment">#数据操作指令</span><span class="built_in"></span></div><div class="line">move v1, v2		<span class="comment">#v1=v2</span></div><div class="line"><span class="comment">#数组操作指令</span><span class="built_in"></span></div><div class="line">new-array v0,v0,[I	<span class="comment"># v0 = new int[v0(8)];</span><span class="built_in"></span></div><div class="line">array-length v1, v0	<span class="comment"># v1 = v0(8);</span></div><div class="line"><span class="comment">#实例操作指令</span><span class="built_in"></span></div><div class="line">new-instance v1, <span class="class">Ljava/lang/StringBuilder;</span>	<span class="comment">#v1 = new StringBuilder();</span></div><div class="line"><span class="comment">#方法调用指令</span></div><div class="line">invoke-direct&#123;v1&#125;, <span class="class">Ljava/lang/StringBuilder;</span>-&gt;&lt;init&gt;()V		<span class="comment">#(不确定是不是这个意思) void init(v1)</span></div><div class="line"><span class="comment">#跳转指令</span><span class="built_in"></span></div><div class="line">if-nez v0,<span class="keyword"> :cond_0</span>	<span class="comment">#如果v0!=0;则跳转到cond_0</span><span class="built_in"></span></div><div class="line">goto : goto_0		<span class="comment">#否则就进入goto_0</span><span class="keyword"></span></div><div class="line">:cond_0			<span class="comment">#cond_0开始</span></div><div class="line"><span class="comment">#数据转换指令</span><span class="built_in"></span></div><div class="line">int-to-float v2,v2	<span class="comment">#v2 = (float)v2</span></div><div class="line"><span class="comment">#数据运算指令</span><span class="built_in"></span></div><div class="line">add-float v2,v2,v2	<span class="comment">#v2 = v2+v2</span></div><div class="line"><span class="comment">#比较指令</span><span class="built_in"></span></div><div class="line">cmpl-float v0,v2,v2	<span class="comment">#if(v2==v2) v0 = 0</span></div><div class="line"><span class="comment">#字段操作指令</span><span class="built_in"></span></div><div class="line">sget-object v0,<span class="class">Ljava/lang/System;</span>-&gt;out:<span class="class">Ljava/io/PrintStream;</span>	<span class="comment"># v0 = out();</span><span class="built_in"></span></div><div class="line">const-string v1,<span class="string">"HelloWorld"</span> <span class="comment">#构造字符串 v1 = "HellpWorld"</span></div><div class="line"><span class="comment">#方法调用指令</span></div><div class="line">invoke-virtual&#123;v0,v1&#125;,<span class="class">Ljava/io/PrintStream;</span>-&gt;println(<span class="class">Ljava/lang/String;</span>)V	<span class="comment">#out.println(v1)</span></div><div class="line"><span class="comment">#返回指令</span><span class="keyword"></span></div><div class="line">:goto_0	<span class="comment">#goto_0 开始</span></div></pre></td></tr></table></figure>
<p><strong>完成代码如下,</strong></p>
<figure class="highlight smali"><table><tr><td class="code"><pre><div class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">LHelloWorld;</span>	<span class="comment">#定义类名</span></div><div class="line"><span class="keyword">.super</span> <span class="class">Ljava/lang/Object;</span>	<span class="comment">#定义父类</span></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> main([<span class="class">Ljava/lang/String;</span>)V	<span class="comment">#声明main()&lt;主函数&gt;</span></div><div class="line">	.registers 4	<span class="comment">#程序中使用v0,v1,v2寄存器与一个参数寄存器</span></div><div class="line">	.prologue	<span class="comment">#代码起始指令</span></div><div class="line">	<span class="comment">#空指令</span></div><div class="line"><span class="built_in">	nop</span></div><div class="line"><span class="built_in">	nop</span></div><div class="line"><span class="built_in">	nop</span></div><div class="line">	<span class="comment">#数据定义指令</span></div><div class="line"><span class="built_in">	const/16 </span>v0, 0x8	<span class="comment">#v0=0x8</span></div><div class="line"><span class="built_in">	const/4 </span>v1, 0x5		<span class="comment">#v1=0v5</span></div><div class="line"><span class="built_in">	const/4 </span>v2, 0x3		<span class="comment">#v2=0x3</span></div><div class="line">	<span class="comment">#数据操作指令</span></div><div class="line"><span class="built_in">	move </span>v1, v2		<span class="comment">#v1=v2</span></div><div class="line">	<span class="comment">#数组操作指令</span></div><div class="line"><span class="built_in">	new-array </span>v0,v0,[I	<span class="comment"># v0 = new int[v0(8)];</span></div><div class="line"><span class="built_in">	array-length </span>v1, v0	<span class="comment"># v1 = v0(8);</span></div><div class="line">	<span class="comment">#实例操作指令</span></div><div class="line"><span class="built_in">	new-instance </span>v1, <span class="class">Ljava/lang/StringBuilder;</span>	<span class="comment">#v1 = new StringBuilder();</span></div><div class="line">	<span class="comment">#方法调用指令</span></div><div class="line">	invoke-direct&#123;v1&#125;, <span class="class">Ljava/lang/StringBuilder;</span>-&gt;&lt;init&gt;()V		<span class="comment">#(不确定是不是这个意思) void init(v1)</span></div><div class="line">	<span class="comment">#跳转指令</span></div><div class="line"><span class="built_in">	if-nez </span>v0,<span class="keyword"> :cond_0</span>	<span class="comment">#如果v0!=0;则跳转到cond_0</span></div><div class="line"><span class="built_in">	goto </span>: goto_0		<span class="comment">#否则就进入goto_0</span></div><div class="line"><span class="keyword">	:cond_0</span>			<span class="comment">#cond_0开始</span></div><div class="line">	<span class="comment">#数据转换指令</span></div><div class="line"><span class="built_in">	int-to-float </span>v2,v2	<span class="comment">#v2 = (float)v2</span></div><div class="line">	<span class="comment">#数据运算指令</span></div><div class="line"><span class="built_in">	add-float </span>v2,v2,v2	<span class="comment">#v2 = v2+v2</span></div><div class="line">	<span class="comment">#比较指令</span></div><div class="line"><span class="built_in">	cmpl-float </span>v0,v2,v2	<span class="comment">#if(v2==v2) v0 = 0</span></div><div class="line">	<span class="comment">#字段操作指令</span></div><div class="line"><span class="built_in">	sget-object </span>v0,<span class="class">Ljava/lang/System;</span>-&gt;out:<span class="class">Ljava/io/PrintStream;</span>	<span class="comment"># v0 = out();</span></div><div class="line"><span class="built_in">	const-string </span>v1,<span class="string">"HelloWorld"</span> <span class="comment">#构造字符串 v1 = "HellpWorld"</span></div><div class="line">	<span class="comment">#方法调用指令</span></div><div class="line">	invoke-virtual&#123;v0,v1&#125;,<span class="class">Ljava/io/PrintStream;</span>-&gt;println(<span class="class">Ljava/lang/String;</span>)V	<span class="comment">#out.println(v1)</span></div><div class="line">	<span class="comment">#返回指令</span></div><div class="line"><span class="keyword">	:goto_0</span>	<span class="comment">#goto_0 开始</span></div><div class="line"><span class="built_in">	return-void	</span><span class="comment">#没有返回值void</span><span class="keyword"></span></div><div class="line">	.end method</div></pre></td></tr></table></figure>
<p><strong>然后我们可以通过命令java -jar E:\Reverse\smali_baksmali\smali.jar -o classes.dex HelloWorld.smali来将Smali文件打包成dex文件(这里的”E:\Reverse\smali_baksmali\smali.jar”要是配置了环境变量就不用这样带路径了,下面的也是一样)</strong></p>
<p><strong>如果没有报错,就会在当前目录下生成classes.dex(报错了就根据提示调错就好)</strong></p>
<p><strong>然后我们将classes.dex压缩为HelloWorld.zip</strong></p>
<p><strong>测试的时候要保证电脑连着一个手机(已Root)或者有一个模拟器</strong></p>
<p><strong>执行adb push HelloWorld.zip /data/local/ </strong></p>
<p><strong>有的童鞋可能会报下面这个错误</strong></p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><div class="line">adb server version (31) doesn't match this client (39)</div><div class="line">* daemon started successfully * </div><div class="line"><span class="keyword">error: </span>no devices/emulators found</div></pre></td></tr></table></figure>
<p><strong>原因是新版adb错误,我们下载旧版的adb用旧版的adb运行即可</strong></p>
<p><strong>最后,执行adb shell dalvikvm -cp /data/local/HelloWorld.zip HelloWorld就可以了,附图</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170414185954352?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<p><a href="http://download.csdn.net/detail/redwolfchao/9814373" target="_blank" rel="external">这个是Smali.jar</a></p>
<p><a href="http://download.csdn.net/detail/redwolfchao/9814423" target="_blank" rel="external">这个是旧版的adb</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###着手编写一个Smail类型的HelloWord###&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开始编写&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不要直接复制,要一个一个字符敲,否则没有意义!!&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;不要直接复制,要一个一个字符敲,否则
    
    </summary>
    
    
      <category term="Android逆向" scheme="http://joryhe.coding.me/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>安卓移动逆向(三)-Android Dalvik虚拟机</title>
    <link href="http://joryhe.coding.me/post/%E5%AE%89%E5%8D%93%E7%A7%BB%E5%8A%A8%E9%80%86%E5%90%91(%E4%B8%89)-Android%20Dalvik%E8%99%9A%E6%8B%9F%E6%9C%BA.html"/>
    <id>http://joryhe.coding.me/post/安卓移动逆向(三)-Android Dalvik虚拟机.html</id>
    <published>2017-05-03T05:13:13.000Z</published>
    <updated>2017-05-10T09:37:12.355Z</updated>
    
    <content type="html"><![CDATA[<p><strong>大家都知道Java程序是运行在Java虚拟机上,Android程序呢?</strong><br><strong>虽然Android平台使用Java语言来开发应用程序,但是Android程序却不是运行在标准的Java虚拟机上的. Google为Android平台专门设计了一套虚拟机来运行Android程序–Dalvik Virtual Machine,也就是Dalvik虚拟机了</strong></p>
<p><strong>本篇作用:</strong></p>
<ul>
<li>扫盲Dalvik虚拟机</li>
<li><strong>了解Smail的语法,能读懂Smail文件</strong></li>
</ul>
<p>###Dalvik概述###</p>
<p>####Dalvik的特点(相对于JVM)####</p>
<ul>
<li>体积小,占用内存小;</li>
<li>专有的DEX可执行文件格式,体积更小,执行速度更快;</li>
<li>常量池采用32位索引值,寻址类方法名,字段名,常亮更快;</li>
<li>基于寄存器架构,并拥有一套完成的指令系统</li>
<li>提供了对象生命周期管理,堆栈管理,线程管理,安全和异常管理以及垃圾回收等重要功能;</li>
<li>所有的Android程序都运行在Android系统进程里,每个进程对应着一个Dalvik虚拟机实例;</li>
</ul>
<hr>
<p>####Dalvik虚拟机与Java虚拟机的区别####</p>
<ol>
<li>Java虚拟机运行的Java字节码,Dalvik虚拟机运行的是Dalvik字节码</li>
<li><p><strong>Dalvik可执行文件的体积更小</strong><br>稍作解析:<br>SDK中有一个叫做dx的工具负责将Java字节码转换为Dalvik字节码.dx工具对Java类文件重新排列,消除在类文件中出现的所有冗余信息,避免虚拟机在初始化时出现重复的文件加载与解析过程.</p>
<p>举个栗子:<br>在Java中有大量的字符串常量在多个类文件中被重复使用,这些荣誉信息会直接增加文件的体积,同事也会严重影响虚拟机解析文件的效率.dx工具针对这个问题做了专门的处理,它将所有Java类文件中的常量池进行分解,消除其中的冗余信息,重新组合成一个常量池,所有的类文件共享同一个常量池.dx工具转换过程如图所示,由于dx工具对常量池的压缩,是的相同的字符串,常量在DEX文件中只出现一次,从而减小了文件的体积.</p>
</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170413150832180?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="dx工具转换过程" title="">
                </div>
                <div class="image-caption">dx工具转换过程</div>
            </figure>
<ol>
<li><p><strong>Java虚拟机与Dalvik虚拟机架构不同</strong></p>
<p>简单说一下:Java虚拟机基于栈架构,Dalvik基于寄存器架构;</p>
</li>
</ol>
<hr>
<p>###Dalvik指令格式###</p>
<p><strong>一般Dalvik汇编代码由一系列的Dalvik指令组成,指令语法由指令的位描述与指令格式标识来决定.位描述约定如下</strong></p>
<ul>
<li>每16位的字采用空格分割开来;</li>
<li>每个字母表示四位,每个字母按顺序从高字节开始,排列到低字节.每四位之间<strong>可能</strong>用竖线”|”来表示不同的内容;</li>
<li>顺序采用A-Z的翻个大写字母作为一个4位的操作码,op表示一个8位的操作码;</li>
<li>“?”来表示这个字段的所有位为0值;</li>
</ul>
<p><strong>栗子</strong><br>  “A|B|op BBBB F|E|D|C”<br>  指令中间有两个空格,每个分开的部分是16位,共有3个16位组成这条指令;<br>  第一个16位是”A|B|op” 高8位由A和B组成,低字节由操作码op组成;<br>  第二个16位由BBBB组成,他表示一个16位的偏移值;<br>  第三个16位分别由F,E,D,C共四个字节组成,在这里他们表示寄存器的参数.</p>
<p><strong>单独使用位标识还无法确定一条指令的意思,必须通过指令格式标识来指定指令的格式编码,约定如下</strong></p>
<ul>
<li>指令格式标识大多由三个字符组成,前两个是数字,最后一个是字母;</li>
<li>第一个数字式标识指令由多少个16位的字组成;</li>
<li>第二个数字标识指令最多使用寄存器的个数,特殊标记”r”标识使用一定范围内的寄存器;</li>
<li>第三个字母为类型码,标识指令用到的额外数据的类型,见下图:</li>
<li><p>还有一种特殊的情况 是末尾可能还会多出另一个字母,如果是”s”表示指令采用静态链接,如果是”i”表示指令应该被内联处理.</p>
<p><img src="http://img.blog.csdn.net/20170413152723245?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="指令格式标识的类型码"></p>
</li>
</ul>
<p><strong>栗子</strong></p>
<p>“22x” 有三条信息可以读出</p>
<ol>
<li>指令由2个16位字组成</li>
<li>指令使用2个寄存器</li>
<li>没有使用到额外的数据</li>
</ol>
<p><strong>另外,Dalvik指令对语法做了一些说明,约定如下</strong></p>
<ul>
<li>每条指令从操作码开始,后面紧跟参数,参数个数不定,每个参数之间采用逗号分开;</li>
<li>每条指令的参数从指令的第一部分开始,op位于低8位,高8位可以是一个8位的参数也可以是两个4位的参数,还可以为空.如果指令超过16位,则后面的部分依次作为参数;</li>
<li>如果参数使用”vX”的方式标识,表明它是一个寄存器,如v0,v1等;</li>
<li>如果参数采用”#+X”的方式,表明它是一个常量数字;</li>
<li>如果参数采用”+X”的方式,表明它是一个相对指令的地址偏移;</li>
<li>如果参数采用”kind@X”的方式,表明它是一个常量池索引值.其中kind表示常量池类型,例如string@BBBB,表示的就是字符串常量池索引BBBB;</li>
</ul>
<p><strong>栗子</strong><br>“op vAA string@BBBB”<br>高8位为空,用到1个寄存器参数vAA,还用到一个字符串常量池索引BBBB;</p>
<hr>
<p>###Dalvik寄存器###</p>
<p><strong>扫盲结束了,开始重点了</strong></p>
<p>####Dalvik字节码的类型,方法,与字段表示方法####</p>
<ol>
<li><strong>类型</strong><br>Dalvik字节码只有两种类型,基本与引用,话不多说,看图;<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170413155625862?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="类型" title="">
                </div>
                <div class="image-caption">类型</div>
            </figure>
每个Dalvik寄存器都是32位大小,对于小鱼或者等于32位长度的类型来说,一个寄存器就可以存放该类型的值,而像J(long),D(double)等64位的类型,它们的值是使用相邻量个寄存器来存储的,v0和v1或者vN与vN+1等;<br>L就好理解了,表示任何一个Java类,在Dalvik汇编代码中,它们以” Lpackage/name/ObjectName; “表示,注意最后一个分号,比如” Ljava/lang/String;”相当于String;<br>[类型就是所有的数组,[后面紧跟基本类型的描述符,如[I表示一个整型一维数组,-&gt;int[],[[I表示int[][]&lt;—&gt; [Ljava/lang/String; 表示对象数组 String [];</li>
<li><strong>方法</strong><br>Dalvik使用方法名,类型参数与返回值来描述一个方法;<br>格式如下:<br>Lpackage/name/ObjectName;-&gt;MethodName(III)Z<br>说明:<br>Lpackage/name/ObjectName;是一个类型;<br>MethodName方法名<br>(III)参数,三个int参数<br>Z返回值void<br><strong>栗子</strong><br>method(I[[IILjava/lang/String;[Ljava/lang/String;)Ljava/lang/String;<br>咳咳,按照上面的知识,将其转换为Java形式的代码为:<br>String method(int ,int[][],String,String[])</li>
<li><strong>字段</strong><br>字段和方法很相似,就是没有参数和返回值,取而代之的是字段的类型,格式如下<br>Lpackage/name/ObjectName;-&gt;FieldName:TYPE<br>说明:<br>Lpackage/name/ObjectName;是一个类型;<br>FieldName字段名<br>TYPE字段类型<br>FieldName与TYPE用冒号隔开<br><strong>栗子</strong><br>name:Ljava/lang/String;<br>转换:<br>String name;<br><strong>Dalvik代码中的字段代码以.field指令开头,根据字段类型不同,在字段指令的开始,可能会用到井号”#”加以注释</strong>;</li>
</ol>
<hr>
<p>###Dalvik指令集###</p>
<p>####指令特点####</p>
<p>Dalvik指令在调用格式上模仿了C语言的调用约定.Dalvik指令语法与助词符有如下特点:</p>
<ul>
<li>参数采用从目标(destination)到源(source)的方式;</li>
<li>根据字节码的布局与选项的不同,一些字节码添加了字节码后缀消除歧义,这些后缀通过在字节码主名称后添加斜杠”/“来分隔开;</li>
<li>在指令集的描述中,宽度值中的每个字母表示宽度为4位;</li>
<li>根据字节码的大小与类型的不同,一些字节码添加了名称后缀以消除歧义:<ul>
<li>32位常规类型的字节码,未添加任何后缀;</li>
<li>64位常规类型的字节码以-wide后缀;</li>
<li>特殊类型的字节码根据具体类型添加后缀,他们可以是-boolean,-byte,-char,-short,-int,-long,-float,-double,-object,-string,-class,-void之一;</li>
</ul>
</li>
</ul>
<p><strong>栗子</strong><br>“move-wide/from16 vAA,vBBBB”</p>
<p>move为基础字节码.标识这是基本操作;<br>wide为名称后缀.标识指令操作的数据宽度(64位);<br>from16位字节码后缀.标识源为一个16位的寄存器引用变量;<br>vAA为目的寄存器,它始终在源的前面 取值范围为v0-v2^8-1(255);<br>vBBBB为源寄存器,取值范围为v0-v2^16-1(65535)</p>
<p><strong>空操作指令</strong></p>
<p>空操作指令的助记符为nop,他的值是00,通常nop指令被用过对齐代码用途,没啥大用;</p>
<p><strong>数据操作指令</strong></p>
<p>数据操作指令为<strong>move</strong>.move指令的原型为move destination,source或者move destination,move指令根据字节码的大小与类型不同,后面会跟上不同的后缀.<br><strong>栗子(表示太多直接上图,都差不多)</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170413171403627?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="数据操作指令" title="">
                </div>
                <div class="image-caption">数据操作指令</div>
            </figure>
<p><strong>返回指令</strong></p>
<p>返回指令指的是函数结尾时运行的最后一条指令.他的基础字节码位<strong>return</strong>,共有以下四条返回指令<br><strong>栗子</strong></p>
<ol>
<li>“return-void” 返回一个void</li>
<li>“return vAA” 返回一个32位非对象类型的值,返回值寄存器位8位的寄存器vAA;</li>
<li>“return-wide vAA” 返回一个64位非对象类型的值,返回值寄存器位8位的寄存器vAA;</li>
<li>“return-object vAA” 返回一个对象类型的值,返回值寄存器位8位的寄存器vAA;</li>
</ol>
<p><strong>数据定义指令</strong></p>
<p>数据定义指令用来定义程序中用到的变量,字符串,类等数据,他的基础字节码为<strong>const</strong><br><strong>栗子(表示太多直接上图-_-)</strong><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170413172400594?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170413172418327?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure></p>
<p><strong>锁指令</strong></p>
<p>锁指令多用在多线程程序中对同一对象的操作,Dalvik指令集中有两条锁指令.</p>
<ol>
<li>“monitor-enter vAA” 为指定的对象获取锁</li>
<li>“monitor-exit vAA”为指定的对象释放锁</li>
</ol>
<p><strong>实例操作指令</strong></p>
<p>与实例相关的操作包括实例的类型传换,检查及新建等;</p>
<ul>
<li>“check-case vAA,type@BBBB” 将vAA中的对象引用强转为BBBB类型;</li>
</ul>
<figure class="highlight lisp"><table><tr><td class="code"><pre><div class="line">(<span class="name">BBBB</span>)vAA<span class="comment">;</span></div></pre></td></tr></table></figure>
<ul>
<li>“instance-of vA,vB,type@CCCC” 判断vB中的对象引用是否能转成CCCC类型,能vA=1,不能vA=0;</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span>(vB.<span class="keyword">instanceof</span>(type<span class="meta">@CCCC</span>))&#123;</div><div class="line">	vA =<span class="number">1</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	vA = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>“new-instance vAA,type@BBBB” 新建一个BBBB的对象vAA,BBBB不能为数组</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><div class="line"><span class="attribute">BBBB vAA</span> = new BBBB();</div></pre></td></tr></table></figure>
<ul>
<li>“check-cast/jumbo vAAAA,type@BBBBBBBB” 与”check-case vAA,type@BBBB”作用相同,只是取值范围更大(Android 4.0新增)</li>
<li>“instance-of/jumbo vAAAA,vBBBB,type@CCCCCCCC”与”instance-of vAA,vBB,type@CCCC”作用相同,只是取值范围更大(Android 4.0新增)</li>
<li>“new-instance/jumbo vAAAA,type@BBBBBBBB”与”new-instance vAA,type@BBBB”作用相同,只是取值范围更大(Android 4.0新增)</li>
</ul>
<p><strong>数组操作指令</strong></p>
<p>数组操作包括获取数组长度(指的是数组的条目个数),新建数组,数组赋值,数组元素取值与赋值等操作;</p>
<ul>
<li>“array-length vA,vB” </li>
</ul>
<figure class="highlight abnf"><table><tr><td class="code"><pre><div class="line"><span class="attribute">vA</span> = vB.length<span class="comment">; //	将vB的长度赋值给vA</span></div></pre></td></tr></table></figure>
<ul>
<li>“new-array vA,vB,type@CCCC”</li>
</ul>
<figure class="highlight abnf"><table><tr><td class="code"><pre><div class="line"><span class="attribute">vA</span> = CCCC[vB]<span class="comment">; //	构建一个vB大的CCCC类型的数组赋值给vA</span></div></pre></td></tr></table></figure>
<ul>
<li>其余的附图<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170413174546498?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
</li>
</ul>
<p><strong>异常指令</strong></p>
<p>Dalvik 指令集中有一条指令用于抛出异常</p>
<ul>
<li>“throw vAA” 抛出vAA寄存器中指定类型的异常</li>
</ul>
<p><strong>跳转指令</strong></p>
<p>Dalvik指令集中有三种跳转指令:无条件跳转(goto),分支跳转(switch),条件跳转(if)</p>
<ul>
<li>“goto +AA” 无条件跳转到指定偏移处,偏移量AA不能为0;</li>
<li>“goto/16+AAAA” 无条件跳转到指定偏移处,偏移量AAAA不能为0;</li>
<li>“goto/32+AAAAAAAA” 无条件跳转到指定偏移处;</li>
<li>“packed-switch vAA,+BBBBBBBB” 分支跳转指令. vAA寄存器为switch分支中需要判断的值即(switch(vAA)),BBBBBBBB指向一个packed-switch-payload格式的偏移表,表中的值是规律递增的.(先这么记住就好,感兴趣可以找百度..)</li>
<li>“sparse-switch vAA,+BBBBBBBB”分支跳转指令,vAA寄存器为switch分支中需要判断的值即(switch(vAA)),BBBBBBBB指向一个sparse-switch-payload格式的偏移表,表中的值是无规律的偏移量.</li>
<li>“if-test vA,vB,+CCCC” 条件跳转指令,比较vA与vB的值,如果比较结果满足就跳转到CCCC指定的偏移处,偏移量CCCC不能为0,if-test类型的指令有以下几条:<ul>
<li>“if-eq vA, vB, :cond_xx” 如果vA等于vB则跳转到:cond_xx </li>
<li>“if-ne vA, vB, :cond_xx” 如果vA不等于vB则跳转到:cond_xx </li>
<li>“if-lt vA, vB, :cond_xx” 如果vA小于vB则跳转到:cond_xx </li>
<li>“if-ge vA, vB, :cond_xx” 如果vA大于等于vB则跳转到:cond_xx </li>
<li>“if-gt vA, vB, :cond_xx” 如果vA大于vB则跳转到:cond_xx </li>
<li>“if-le vA, vB, :cond_xx” 如果vA小于等于vB则跳转到:cond_xx </li>
</ul>
</li>
<li>“if-testz vAA,+BBBB”条件跳转指令,那vAA与0作比较,满足结果或者不满足结果就跳转到BBBB的指定偏移处BBBB不能为0, if-testz类型的指令有以下几条:<ul>
<li>“if-eqz vA, :cond_xx” 如果vA等于0则跳转到:cond_xx </li>
<li>“if-nez vA, :cond_xx” 如果vA不等于0则跳转到:cond_xx </li>
<li>“if-ltz vA, :cond_xx” 如果vA小于0则跳转到:cond_xx </li>
<li>“if-gez vA, :cond_xx” 如果vA大于等于0则跳转到:cond_xx </li>
<li>“if-gtz vA, :cond_xx” 如果vA大于0则跳转到:cond_xx </li>
<li>“if-lez vA, :cond_xx” 如果vA小于等于0则跳转到:cond_xx</li>
</ul>
</li>
</ul>
<p><strong>比较指令</strong></p>
<p>比较指令用于对两个寄存器的值(浮点型或者长整型)进行比较格式为:<br>“cmpkind vAA,vBB,vCC” </p>
<p>Dalvik指令集中共有5条比较指令:</p>
<ul>
<li><p>“cmpl-float” 比较两个float值;</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="attr">vBB</span> == vCC)&#123;</div><div class="line">	<span class="attr">vAA</span> =<span class="number">0</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(vBB&gt;vCC)&#123;</div><div class="line">	<span class="attr">vAA</span> = -<span class="number">1</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(vBB&lt;vCC&gt;)&#123;</div><div class="line">	<span class="attr">vAA</span> = <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>“cmpg-float” 比较两个float的值</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="attr">vBB</span> == vCC)&#123;</div><div class="line">	<span class="attr">vAA</span> =<span class="number">0</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(vBB&lt;vCC)&#123;</div><div class="line">	<span class="attr">vAA</span> = -<span class="number">1</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(vBB&gt;vCC&gt;)&#123;</div><div class="line">	<span class="attr">vAA</span> = <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>当cmpg或者cmp时,B &gt; C时A = 1,反之-1;当cmpl时,B &gt; C时A = -1反之1;</strong></p>
<ul>
<li>“cmpg-double” 比较两个double的值</li>
<li>“cmpl-double” 比较两个double的值</li>
<li>“cmp-long” 比较两个long的值</li>
</ul>
<p><strong>字段操作指令</strong></p>
<p>字段操作指令用来对对象实例的字段进行读写操作.<br>字段的类型可以是Java中有效的数据类型,对普通字段与静态字段操作有两种指令集,分别是”iinstanceop vA,vB,field@CCCC”与”sstaticop vAA,field@BBBB”.<br>在Android 4.0系统中,有”iinstanceop /jumbovAAAA,vBBBB,field@CCCCCCCC”与”sstaticop/jumbo vAAAA,field@BBBBBBBB”.和上面的两种作用相同,只是加了jmpbo后缀,寄存器与指令索引取值范围更大(后面的只会说有/jumbo指令后缀的指令集,作用就不指明了)<br>普通字段指令的指令前缀为i,如.对普通字段读操作使用iget指令,写操作使用iput指令;静态字段的指令前缀为s,如.对静态字段的读操作为sget,写操作为sput;<br>根据访问的字段类型不同,字段操作指令后面会紧跟字段类型的后缀,如iget-byte指令表示读取实例字段的值类型为byte;</p>
<p><strong>方法调用指令</strong><br>方法调用指令负责调用类实例的方法,它的基础指令为invoke,方法调用指令有”invoke-kind{vC,vD,vE,vF,vG},meth@BBBB”与”invoke-kind/range{vCCCC…VNNNN},meth@BBBB”两类,这两类指令作用没啥不同,后者在设置参数寄存器时使用了range来指定寄存器的范围,根据方法类型的不同,共有如下5条方法调用指令:</p>
<ol>
<li>“invoke-virtual” 调用实例的虚方法</li>
<li>“invoke-super” 调用实例的父类方法</li>
<li>“invoke-direct” 调用实例的直接方法</li>
<li>“invoke-static” 调用实例的静态方法</li>
<li>“invoke-interface” 调用实例的接口方法<br>Android 4.0有jumbo的指令集;</li>
</ol>
<p>方法调用指令的返回值必须使用move-result*指令来获取:<br>invoke-static{},Landroid/os/Parcel;-&gt;obtain()Landroid/os/Parcel;<br>move-result-object v0;</p>
<p><strong>数据转换指令</strong><br>数据转换指令用于将一种类型的数值转换为另一种类型,他的格式为”unop vA,vB” 把vB中的数据做一定运算(转换)放在vA中:(比较简单,直接上图)</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170413185529172?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<p><strong>数据运算指令</strong></p>
<p>数据运算指令包括算数运算指令与逻辑运算指令:</p>
<ul>
<li>算数运算指令:加,减,乘,除,模,移位等</li>
<li>逻辑运算指令:间与,或,非,抑或等;<br>上个图吧<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170413185946687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
其中基础字节码后面的-type可以是-int,-long,-float,-double,后面3类指令也差不多,就不列了,触类旁通;</li>
</ul>
<p><strong>=<em>= =</em>= =<em>= =</em>= =<em>= =</em>= =<em>= =</em>= =<em>= =</em>= =<em>= =</em>= =<em>= =</em>= =<em>= =</em>= =<em>= =</em>= =<em>= =</em>= =<em>= =</em>= </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;大家都知道Java程序是运行在Java虚拟机上,Android程序呢?&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;虽然Android平台使用Java语言来开发应用程序,但是Android程序却不是运行在标准的Java虚拟机上的. Google为Android平
    
    </summary>
    
    
      <category term="Android逆向" scheme="http://joryhe.coding.me/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>安卓移动逆向(二)</title>
    <link href="http://joryhe.coding.me/post/%E5%AE%89%E5%8D%93%E7%A7%BB%E5%8A%A8%E9%80%86%E5%90%91(%E4%BA%8C).html"/>
    <id>http://joryhe.coding.me/post/安卓移动逆向(二).html</id>
    <published>2017-05-02T04:12:12.000Z</published>
    <updated>2017-05-10T09:36:57.451Z</updated>
    
    <content type="html"><![CDATA[<p>###小实践–破解一个小程序###</p>
<p><strong>如何破解</strong></p>
<p>破解Android程序通常的方法是将apk文件利用ApkTool反编译,生成Smali格式的反汇编代码.然后阅读Smali文件的代码来理解程序的运行机制,找到程序的突破口进行修改,最后使用ApkTool重新编译生成Apk文件并签名,最后运行测试,如此循环,直到程序被成功破解.</p>
<p><strong>需要工具</strong></p>
<p> <a href="http://download.csdn.net/detail/redwolfchao/9807486" target="_blank" rel="external">编译工具 : ApkTool</a></p>
<p>签名工具: SignApk : 链接：<a href="http://pan.baidu.com/s/1miwl6lU" target="_blank" rel="external">http://pan.baidu.com/s/1miwl6lU</a> 密码：ze44</p>
<p>下载完之后 解压目录到path环境变量 你懂得</p>
<hr>
<p><strong>准备</strong></p>
<p>我们先建立一个自己的App,长得像这样(PS:不愿意自己建有源码下载)</p>
<p><a href="http://download.csdn.net/detail/redwolfchao/9807302" target="_blank" rel="external">待破解代码</a></p>
<p>功能就是根据输入的用户名生成注册码,判断输入的注册码和系统算法生成的注册码是否一致,一致则注册成功,软件可用,否则则不可用;</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170407190037293?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="软件" title="">
                </div>
                <div class="image-caption">软件</div>
            </figure>
<p><strong>软件核心代码</strong></p>
<figure class="highlight pony"><table><tr><td class="code"><pre><div class="line">findViewById(<span class="type">R</span>.id.act_main_btn).setOnClickListener(<span class="function"><span class="keyword">new</span> <span class="title">View</span>.<span class="title">OnClickListener</span>() &#123;</span></div><div class="line">    @<span class="title">Override</span></div><div class="line">    <span class="title">public</span> <span class="title">void</span> <span class="title">onClick</span>(<span class="type">View</span> v) &#123;</div><div class="line">        <span class="title">String</span> <span class="title">userName</span> = <span class="title">etUser</span>.<span class="title">getText</span>().<span class="title">toString</span>().<span class="title">trim</span>();</div><div class="line">        <span class="title">String</span> <span class="title">sn</span> = <span class="title">etSN</span>.<span class="title">getText</span>().<span class="title">toString</span>().<span class="title">trim</span>();</div><div class="line">        <span class="title">if</span> (checkSN(userName, sn)) &#123;</div><div class="line">            <span class="title">Toast</span>.<span class="title">makeText</span>(<span class="type">MainActivity</span>.this, <span class="type">R</span>.string.string_register, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).<span class="title">show</span>();</div><div class="line">            <span class="title">tvTitle</span>.<span class="title">setText</span>(<span class="type">R</span>.string.string_success_register);</div><div class="line">        &#125; <span class="title">else</span> &#123;</div><div class="line">            <span class="title">Toast</span>.<span class="title">makeText</span>(<span class="type">MainActivity</span>.this, <span class="type">R</span>.string.string_unregister, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).<span class="title">show</span>();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<p><strong>开始破解</strong></p>
<p>首先我们需要用apktool d appname.apk  进行反编译  如图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170407190405811?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="反编译" title="">
                </div>
                <div class="image-caption">反编译</div>
            </figure>
<p>然后生成了一个appName的文件夹 里面就是 那些smali等文件了</p>
<p>之后我们的目的 是找到突破口,什么是突破口? </p>
<p><strong><em>点击Button之后的提示文字就是突破口</em></strong></p>
<p>我们进入values中的string.xml找找看</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170407190631738?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=".." title="">
                </div>
                <div class="image-caption">..</div>
            </figure>
<p><strong>开发Android程序时,String.xml文件中的所有字符串资源都在”gen/<packagename>/R.java”文件的String类中被标识,每个字符串都有唯一的int类型索引值,使用ApkTool反编译Apk文件后,所有的索引值保存在string.xml文件同目录下的public.xml中</packagename></strong></p>
<p>搜索string_unregister在public.xml中</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170408091202516?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<p>我们发现string_unregister所对应的id为 0x7f060027 </p>
<p><strong>书上说需要全局搜索smali文件夹中包含0x7f060027文件的位置,我们知道是在MainActivity中声明的,直接进入即可(PS:惭愧,我不知道如何全局搜索文件内的内容)</strong></p>
<p>我们进入MainActivity$1.smali搜索0x7f060027   如图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170408091511625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<p>解析如下</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170408091635813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<p><strong>按图修改之后,我们进入app文件夹,再次编译打包会在dist中生成一个app,我们现在签名(不签名是无法运行测试的) 如图</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170408091706813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<p><strong>然后我们进行签名,用我们下载的signapk工具,生成-&gt;已签名的App  如图</strong><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170408091805963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure></p>
<p><strong>生成之后 我们可以通过adb install signed.apk 安装到手机测试 也可以复制到手机上直接安装,哦,可能会报错</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170408092231782?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<p><strong>把手机上的相同App卸载了即可</strong></p>
<p><strong>安装之后,就这样了</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170408092410582?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<p>参考书籍: <a href="http://download.csdn.net/detail/redwolfchao/9807301" target="_blank" rel="external">Android软件安全与逆向分析</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###小实践–破解一个小程序###&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何破解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;破解Android程序通常的方法是将apk文件利用ApkTool反编译,生成Smali格式的反汇编代码.然后阅读Smali文件的代码来理解程序的运行机制,找到程序的突
    
    </summary>
    
    
      <category term="Android逆向" scheme="http://joryhe.coding.me/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>安卓移动逆向(扫盲)</title>
    <link href="http://joryhe.coding.me/post/%E5%AE%89%E5%8D%93%E7%A7%BB%E5%8A%A8%E9%80%86%E5%90%91(%E6%89%AB%E7%9B%B2).html"/>
    <id>http://joryhe.coding.me/post/安卓移动逆向(扫盲).html</id>
    <published>2017-05-01T03:11:11.000Z</published>
    <updated>2017-05-10T09:37:22.612Z</updated>
    
    <content type="html"><![CDATA[<p>###Android 逆向 ###</p>
<p><strong>没啥好说的,先扫一下盲</strong></p>
<hr>
<p>###APK 组成 ###</p>
<p><strong>asset文件夹：</strong><br><strong>资源目录1：asset和res都是资源目录但有所区别，见下面说明</strong><br><strong>lib文件夹：  so库存放位置，一般由NDK编译得到，常见于使用游戏引擎或JNI native调用的工程中</strong><br><strong>res文件夹 ：资源目录2：asset和res都是资源目录但有所区别，见下面说明</strong><br><strong>classes.dex  ：Java代码编译得到的Dalvik VM能直接执行的文件，下面有介绍</strong></p>
<p><strong>res目录下的资源文件在编译时会自动生成索引文件（R.java），在Java代码中用R.xxx.yyy来引用；</strong><br><strong>而asset目录下的资源文件不需要生成索引，在Java代码中需要用AssetManager来访问；</strong></p>
<p><strong>一般来说，除了音频和视频资源（需要放在raw或asset下），使用Java开发的Android工程使用到的资源文件都会放在res下；使用C++游戏引擎（或使用Lua Unity3D等）的资源文件均需要放在asset下。</strong></p>
<hr>
<p>###Dalvik 字节码 ###</p>
<p><strong>Dalvik字节码是什么？</strong></p>
<p>Dalvik字节码是学习破解的基础，对它我们需要了解一下</p>
<p>Dalvik是google专门为Android操作系统设计的一个虚拟机，经过深度的优化。虽然Android上的程序是使用java来开发的，但是Dalvik和标准的java虚拟机JVM还是两回事。Dalvik VM是基于寄存器的，而JVM是基于栈的；Dalvik有专属的文件执行格式dex（dalvik executable），而JVM则执行的是java字节码。Dalvik VM比JVM速度更快，占用空间更少。</p>
<p>通过Dalvik的字节码我们不能直接看到原来的逻辑代码，这时需要借助如Apktool或dex2jar+jd-gui工具来帮助查看。但是，注意的是最终我们修改APK需要操作的文件是.smali文件，而不是导出来的Java文件重新编译。</p>
<hr>
<p>###Smali–破解的重中之重###</p>
<p><strong>什么是Smali？</strong></p>
<p><strong>Smali，Baksmali分别是指安卓系统里的Java虚拟机（Dalvik）所使用的一种。dex格式文件的汇编器，反汇编器。其语法是一种宽松式的Jasmin/dedexer语法，而且它实现了.dex格式所有功能（注解，调试信息，线路信息等）</strong></p>
<p><strong>当我们对APK文件进行反编译后，便会生成此类的文件，小编在此对smali文件进行简要的介绍。其中在Davlik字节码中，寄存器都是32位的，能够支持任何类型，64位类型（Long/Double）用2个寄存器表示；Dalvik字节码有两种类型：原始类型；引用类型（包括对象和数组）</strong></p>
<p><strong><em>原始类型</em></strong></p>
<p>B—byte<br>C—char<br>D—double<br>F—float<br>I—int<br>J—long<br>S—short<br>V—void<br>Z—boolean<br>[XXX—array<br>Lxxx/yyy—object</p>
<p><strong>这里解析下最后两项，数组的表示方式是：在基本类型前加上前中括号“[”，例如int数组和float数组分别表示为：[I、[F；对象的表示则以L作为开头，格式是LpackageName/objectName;（注意必须有个分号跟在最后），例如String对象在smali中为：Ljava/lang/String;，其中java/lang对应java.lang包，String就是定义在该包中的一个对象。</strong></p>
<p><strong>或许有人问，既然类是用LpackageName/objectName;来表示，那类里面的内部类又如何在smali中引用呢?答案是：LpackageName/objectName$$subObjectName;。也就是在内部类前加“$”符号，关于“$”符号更多的规则将在后面谈到。</strong></p>
<p><strong>方法的定义一般为：     Func-Name (Para-Type1Para-Type2Para-Type3…)Return-Type     注意参数与参数之间没有任何分隔符，同样举几个例子就容易明白了：     1. hello ()V         没错，这就是void hello()。     2. hello (III)Z         这个则是boolean hello(int, int, int)。     3. hello (Z[I[ILjava/lang/String;J)Ljava/lang/String;         看出来这是String hello (boolean, int[], int[], String, long) 了吗？</strong></p>
<hr>
<p><strong><em>Smali基本语法</em></strong></p>
<p>.field private isFlag:z　　定义变量<br>.method　　方法<br>.parameter　　方法参数<br>.prologue　　方法开始<br>.line 123　　此方法位于第123行<br>invoke-super　　调用父函数<br>const/high16  v0, 0x7fo3　　把0x7fo3赋值给v0<br>invoke-direct　　调用函数<br>return-void　　函数返回void<br>.end method　　函数结束<br>new-instance　　创建实例<br>iput-object　　对象赋值<br>iget-object　　调用对象<br>invoke-static　　调用静态函数</p>
<p>条件跳转分支：</p>
<p>“if-eq vA, vB, :cond_xx”   如果vA等于vB则跳转到:cond_xx<br>“if-ne vA, vB, :cond_xx”   如果vA不等于vB则跳转到:cond_xx<br>“if-lt vA, vB, :cond_xx”    如果vA小于vB则跳转到:cond_xx<br>“if-ge vA, vB, :cond_xx”   如果vA大于等于vB则跳转到:cond_xx<br>“if-gt vA, vB, :cond_xx”   如果vA大于vB则跳转到:cond_xx<br>“if-le vA, vB, :cond_xx”    如果vA小于等于vB则跳转到:cond_xx<br>“if-eqz vA, :cond_xx”   如果vA等于0则跳转到:cond_xx<br>“if-nez vA, :cond_xx”   如果vA不等于0则跳转到:cond_xx<br>“if-ltz vA, :cond_xx”    如果vA小于0则跳转到:cond_xx<br>“if-gez vA, :cond_xx”   如果vA大于等于0则跳转到:cond_xx<br>“if-gtz vA, :cond_xx”   如果vA大于0则跳转到:cond_xx<br>“if-lez vA, :cond_xx”    如果vA小于等于0则跳转到:cond_xx</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###Android 逆向 ###&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;没啥好说的,先扫一下盲&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;###APK 组成 ###&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;asset文件夹：&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;资源目录1：asset
    
    </summary>
    
    
      <category term="Android逆向" scheme="http://joryhe.coding.me/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Lambda表达式--Java 8 新特性</title>
    <link href="http://joryhe.coding.me/post/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
    <id>http://joryhe.coding.me/post/Lambda表达式.html</id>
    <published>2017-04-28T02:00:00.000Z</published>
    <updated>2017-04-28T02:58:56.766Z</updated>
    
    <content type="html"><![CDATA[<p>#正文#</p>
<p>Lambda表达式是Java 8中提供的新特性<br>-<br><strong>也就是说,要用这个电脑上的JDK环境要是jdk1.8</strong></p>
<p><strong>Lambda表达式本质上是一种匿名方法(匿名的不能再匿名了)</strong></p>
<p><strong>使用它需要在app/gradle中添加如下配置</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    defaultConfig &#123;</div><div class="line">        ...</div><div class="line">        <span class="comment">//  Lambda表达式声明</span></div><div class="line">        jackOptions<span class="selector-class">.enabled</span> = true</div><div class="line">    &#125;</div><div class="line">    compileOptions&#123;</div><div class="line">        sourceCompatibility JavaVersion<span class="selector-class">.VERSION_1_8</span></div><div class="line">        targetCompatibility JavaVersion<span class="selector-class">.VERSION_1_8</span></div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>简单描述一下适用于什么情况</strong></p>
<ul>
<li>某个接口只有一个待实现的方法,就可以用了..看栗子吧</li>
</ul>
<p><strong>先来个容易理解的</strong></p>
<p>线程1</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><div class="line"><span class="keyword">Thread</span> <span class="keyword">thread</span> = <span class="literal">new</span> <span class="keyword">Thread</span>(<span class="literal">new</span> Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="literal">void</span> run() &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>线程2</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><div class="line">Thread thread1 = <span class="keyword">new</span> Thread(<span class="function"><span class="params">()</span> -&gt;</span> &#123;</div><div class="line"></div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p><strong>体会一下,精不精彩,刺不刺激!</strong></p>
<p>…Runnable中只有一个run方法需要实现,所以…</p>
<p><strong>罢了,多看几个例子就懂了</strong></p>
<p>线程3</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><div class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;;</div></pre></td></tr></table></figure>
<p>线程4</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><div class="line">Runnable runnable1 = <span class="function"><span class="params">()</span> -&gt;</span> &#123;</div><div class="line"></div><div class="line">        &#125;;</div></pre></td></tr></table></figure>
<p><strong>无奈 结合一下线程1234咱们可以总结出用法</strong></p>
<ul>
<li>()代替了(接口名)以及方法名,因为本身就一个</li>
<li>-&gt;{}就是方法体</li>
</ul>
<p><strong>如果有参数咋办?</strong></p>
<p>栗子(有参数setOnClickListener)</p>
<p>未使用Lambda<br><figure class="highlight aspectj"><table><tr><td class="code"><pre><div class="line">btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>使用了Lambda</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><div class="line">btn.setOnClickListener(<span class="function"><span class="params">(View view)</span> -&gt;</span> &#123;</div><div class="line"></div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><div class="line">btn.setOnClickListener(<span class="function"><span class="params">(view)</span> -&gt;</span> &#123;</div><div class="line"></div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p><strong>参数写在()内,参数类型可以省略,Java会自动识别类型(注:当要实现的方法只有一个参数的时候可以写成下面这个样子,因为只有一个参数)</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">btn</span><span class="selector-class">.setOnClickListener</span>(<span class="selector-tag">v</span> <span class="selector-tag">-</span>&gt; &#123;</div><div class="line"></div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>着实不能再省了</p>
<p><strong>哦 对了 要是有返回值的话,就直接在{}中return即可</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line">HaveReturn haveReturn = str -&gt; &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;;</div><div class="line"><span class="keyword">interface</span> HaveReturn &#123;</div><div class="line">    <span class="built_in">boolean</span> haveReturn(<span class="built_in">String</span> <span class="built_in">string</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>无奈 就可以这么用了,太精简了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#正文#&lt;/p&gt;
&lt;p&gt;Lambda表达式是Java 8中提供的新特性&lt;br&gt;-&lt;br&gt;&lt;strong&gt;也就是说,要用这个电脑上的JDK环境要是jdk1.8&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lambda表达式本质上是一种匿名方法(匿名的不能再匿名了)&lt;/st
    
    </summary>
    
    
      <category term="Java" scheme="http://joryhe.coding.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Material_Design_提供组件</title>
    <link href="http://joryhe.coding.me/post/Material-Design-%E6%8F%90%E4%BE%9B%E7%BB%84%E4%BB%B6.html"/>
    <id>http://joryhe.coding.me/post/Material-Design-提供组件.html</id>
    <published>2017-04-26T02:44:41.000Z</published>
    <updated>2017-04-26T02:45:26.834Z</updated>
    
    <content type="html"><![CDATA[<p>反编译看的实在有点头疼,于是就仔细研究了一下前一段时间的一篇文章Material Design规范,发现这个东西2014年就出来了,为什么我今年才发现呢..无奈.于是乎,读书查资料,撸出一个Demo来;</p>
<p><strong>Demo主要知识点&lt;解释纯属个人见解&gt;</strong></p>
<ol>
<li><p>Toolbar- -&gt;Material Design中推荐用来替代ActionBar的组件</p>
</li>
<li><p>DrawerLayout- -&gt;侧滑菜单的父组件</p>
</li>
<li><p>NavigationView- -&gt;侧滑菜单推荐和DrawerLayout一起组合的使用的菜单组件</p>
</li>
<li><p>FloatingActionButton- -&gt;悬浮按钮</p>
</li>
<li><p>CoordinatorLayout- -&gt;加强版的FrameLayout,拥有部分新特性</p>
</li>
<li><p>Snackbar- -&gt;可交互的Toast(不是替代品)</p>
</li>
<li><p>CardView- -&gt;卡片式布局</p>
</li>
<li><p>AppBarLayout-&gt;Toolbar的父组件,封装部分事件</p>
</li>
<li><p>SwipeRefreshLayout- -&gt;下拉刷新组件</p>
</li>
<li><p>CollapsingToolbarLayout- -&gt;只能作为AppBarLayout的直接子布局,用于实现更多效果</p>
</li>
<li><p>RecyclerView- -&gt;ListView的代替品</p>
</li>
</ol>
<p>// 话不多说</p>
<p>1.ToolBar<br>-</p>
<blockquote>
<p>Toolbar强大之处在于,他不仅继承了ActionBar的所有功能,而且灵活性很高,可以配合其他控件完成一些Material Design的效果</p>
</blockquote>
<p>下面我们就来学习一下(首先你需要有一个项目):</p>
<ul>
<li><p><strong>修改styles文件中的style部分内容.目的是让ActionBar隐藏,可由多种实现方式,这里提供一种.</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>xml文件中</strong></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;<span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>高度为?attr/actionBarSize,也可以自己指定,不过MD规范推荐用这个,同样background也是这个道理</p>
<p><strong>运行</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170426100218290?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<p>..好难看</p>
<ul>
<li><strong>替换ActionBar</strong><br>Activity中加入代码</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="literal">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="params">...</span></div><div class="line">        Toolbar toolBar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolBar);</div><div class="line">        <span class="params">...</span></div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>运行</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170426100252518?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<p>出现我们的Title了,这个是怎么来的,是我们在Manifest中为application设置的label属性的值.和ActionBar是一样的,现在我们的ToolBar才相当于我们的ActionBar,我们也可以修改这个标题,只需要在Manifest中为当前activity添加一个label属性即可</p>
<ul>
<li>ToolBar还有好多用法,自己太单调,结合后面的组件一起来</li>
</ul>
<p>DrawerLayout<br>-<br>好多应用都有这种效果,比如QQ,XX,XXX好多软件<br>用MD中推荐了一种做法</p>
<ul>
<li>需要修改xml根布局为DrawerLayout并加入一个FrameLayout和一个TextView如下:</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">""</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;<span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"然而我就是侧拉菜单"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>运行</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170426100323948?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<p>android:layout_gravity=”start”用来设置滑动菜单在左边还是右边</p>
<p>然而还是有点儿问题,因为用户可能根本不知道有这个菜单,因为只有从屏幕左侧向右滑动才可以,所以我们要如此这般</p>
<p>Activity中</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        setSupportActionBar(toolBar);</div><div class="line">        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        ActionBar actionBar = getSupportActionBar();</div><div class="line">        <span class="keyword">if</span> (actionBar != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//  使ActionBar左侧的按钮默认可见 是一个←</span></div><div class="line">            actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">            <span class="comment">//  修改图标</span></div><div class="line">            actionBar.setHomeAsUpIndicator(R.drawable.ic_menu_home);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">            <span class="keyword">case</span> android.R.id.home:</div><div class="line">                mDrawerLayout.openDrawer(GravityCompat.START);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>// <figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170426100434028?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>然而功能是实现了,但是还是很丑,不过可以的,前面已经说了,有个和DrawerLayout组合用的组件,组合起来用就不丑啦.</p>
<p>NavigationView<br>-</p>
<ul>
<li>使用方法很简单,将原本TextView的位置用NavigationView替换了就是了-&gt;需要加依赖&lt;-<blockquote>
<p>compile ‘com.android.support:design:25.3.1’</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">&lt;android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.NavigationView</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"match_parent"</span></div><div class="line">        android:layout_gravity=<span class="string">"start"</span></div><div class="line">        android:<span class="attribute">background</span>=<span class="string">"@color/colorPrimary"</span> /&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<p>运行之后 效果还是一样,只不过没字了,因为不是TextView,好了<br>NavigationView有两个属性</p>
<ol>
<li>app:menu</li>
<li>app:headerLayout</li>
</ol>
<p>具体是做什么的,写完你就知道了</p>
<ul>
<li>首先我们建立一个menu_nav.xml 肯定在menu文件夹中</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/menu_nav_1"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_home"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"我是1"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/menu_nav_2"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_home"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"我是2"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>group android:checkableBehavior=”single”<br>这个属性是为了限制单选</p>
<ul>
<li>我们再建立一个nav_header.xml 在layout文件夹中</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"180dp"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/icon_header"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>也是很简单的一个布局</p>
<ul>
<li>为NavigationView设置属性了</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">&lt;android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.NavigationView</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:id=<span class="string">"@+id/design_navigation_view"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:layout_gravity=<span class="string">"start"</span></div><div class="line">    android:<span class="attribute">background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">    app:headerLayout=<span class="string">"@layout/nav_header"</span></div><div class="line">    app:menu=<span class="string">"@menu/menu_nav"</span> /&gt;</div></pre></td></tr></table></figure>
<p>这里是app命名空间,所以需要</p>
<blockquote>
<p>xmlns:app=”<a href="http://schemas.android.com/apk/res-auto" target="_blank" rel="external">http://schemas.android.com/apk/res-auto</a>“</p>
</blockquote>
<p>当然 直接alt+enter也会自动添加</p>
<p><strong>运行</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170426100517941?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<ul>
<li>为NavigationView菜单项设置点击事件</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">   ...</div><div class="line">           <span class="keyword">if</span> (actionBar != <span class="literal">null</span>) &#123;</div><div class="line">        <span class="comment">//  使ActionBar左侧的按钮默认可见 是一个←</span></div><div class="line">        actionBar.setDisplayHomeAsUpEnabled(<span class="literal">true</span>);</div><div class="line">        <span class="comment">//  修改图标</span></div><div class="line">        actionBar.setHomeAsUpIndicator(R.drawable.ic_menu_home);</div><div class="line">    &#125;</div><div class="line">    mNavigationView = (NavigationView) findViewById(R.id.design_navigation_view);</div><div class="line">    mNavigationView.setNavigationItemSelectedListener(<span class="keyword">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> onNavigationItemSelected(<span class="meta">@NonNull</span> MenuItem item) &#123;</div><div class="line">            <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">                <span class="keyword">case</span> R.id.<span class="string">menu_nav_1:</span></div><div class="line">                <span class="keyword">case</span> R.id.<span class="string">menu_nav_2:</span></div><div class="line">                    mDrawerLayout.closeDrawers();</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了我们继续来,悬浮式按钮</p>
<p>FloatingActionButton<br>-</p>
<p>知乎右下角的那个圆型按钮就是了</p>
<p>实现</p>
<ul>
<li>xml中我们写在ToolBar下方</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;<span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|end"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/ic_menu_home"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>都是老属性,大家一看效果便能明白:</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170426100542239?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<ul>
<li>基本事件</li>
</ul>
<p>它也有基本的OnOlick事件,使用方式和普通View相同,不做过多说明</p>
<p>Snackbar<br>-</p>
<p>Snackbar不是Toast的替代品,Snackbar只是能够和用户交互而已,但是会自动消失,介于Dialog和Toast之间的组件,使用方式也是介于两者之间;</p>
<p>我们就在FloatingActionButton的事件中显示Snackbar</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><div class="line">mFloatingActionButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Snackbar.make(v, <span class="string">"然而我弹出来了"</span>, Snackbar.LENGTH_SHORT).setAction(<span class="string">"点我"</span>, <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Snackbar.make(v, <span class="string">"然而你点我也没用"</span>, Snackbar.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>运行</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170426100621145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述](http://img.blog.csdn.net/20170426100607614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)![这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述](http://img.blog.csdn.net/20170426100607614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)![这里写图片描述</div>
            </figure>
<p>咳咳,这里Snackbar把下面的FAB挡住了,我们需要解决这个问题,谷歌为我们创造了这个问题,肯定也有相应的解决办法- -&gt;CoordinatorLayout</p>
<p>CoordinatorLayout<br>-<br>CoordinatorLayout是一个加强版的FrameLayout,可以监听所有子控件的各种事件,然后自动帮我们做出最为合理的相应;</p>
<p>我们把FrameLayout替换为CoordinatorLayout</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">""</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;<span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|end"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/ic_menu_home"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>运行</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170426100717094?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<p>需要注意的是,只有Snackbar传入的第一个参数View是CoordinatorLayout的子组件时,此效果才会生效,因为我们传入的是v,而v是我们的FAB,所以会生效;</p>
<p>CardView<br>-</p>
<p>需要依赖</p>
<blockquote>
<p>compile ‘com.android.support:cardview-v7:25.3.1’</p>
</blockquote>
<p>卡片式布局 ,他可以让页面中的元素看起来就像在卡片中一样,并且能够拥有圆角和投影.</p>
<p>咱们把这个卡片里面装上美女放到RecyclerView中去,放松一下…</p>
<p>美女图片需要加载咱们用Glide</p>
<blockquote>
<p>compile ‘com.github.bumptech.glide:glide:3.7.0’</p>
</blockquote>
<ul>
<li>首先写一个item布局,顺带着看看CardView的用法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:elevation</span>=<span class="string">"5dp"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">app:cardCornerRadius</span>=<span class="string">"4dp"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/image"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">            <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"16sp"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></div></pre></td></tr></table></figure>
<p>app:cardCornerRadius=”4dp” 表示圆角的大小<br>android:elevation=”5dp”表示高度Z轴<br>数值越大,高度越高,投影范围越大,投影越浅,反之亦然;</p>
<p>CardView本质是一个FrameLayout没啥好的定位方式,咱们就嵌套一个LinearLayout;</p>
<p>之后我们写RecyclerView部分代码,主界面加入RecyclerView</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">...</div><div class="line">&lt;/android<span class="selector-class">.support</span><span class="selector-class">.v7</span><span class="selector-class">.widget</span><span class="selector-class">.Toolbar</span>&gt;</div><div class="line"></div><div class="line">        &lt;android<span class="selector-class">.support</span><span class="selector-class">.v7</span><span class="selector-class">.widget</span><span class="selector-class">.RecyclerView</span></div><div class="line">            android:id=<span class="string">"@+id/recycler_view"</span></div><div class="line">            android:layout_width=<span class="string">"match_parent"</span></div><div class="line">            android:layout_height=<span class="string">"match_parent"</span>&gt;&lt;/android<span class="selector-class">.support</span><span class="selector-class">.v7</span><span class="selector-class">.widget</span><span class="selector-class">.RecyclerView</span>&gt;</div><div class="line"></div><div class="line">        <span class="comment">// 此处有FAB 影响妹子美观,删除</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>写好适配器以及在Activity中设置好Manager以及初始化好数据</p>
<p>###高能预警:!!!!!!下面会有一长串代码,不想复制的童鞋可以直接跳过###</p>
<ul>
<li>首先妹子实体</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeiZi</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String meiZiName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> meiZiId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MeiZi</span><span class="params">(String meiZiName, <span class="keyword">int</span> meiZiId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.meiZiName = meiZiName;</div><div class="line">        <span class="keyword">this</span>.meiZiId = meiZiId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMeiZiName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> meiZiName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeiZiName</span><span class="params">(String meiZiName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.meiZiName = meiZiName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMeiZiId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> meiZiId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeiZiId</span><span class="params">(<span class="keyword">int</span> meiZiId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.meiZiId = meiZiId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>适配器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeiZiAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MeiZiAdapter</span>.<span class="title">MeiZiViewHolder</span>&gt; <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;MeiZi&gt; meiZiList;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OnItemClickListener listener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MeiZiAdapter</span><span class="params">(List&lt;MeiZi&gt; meiZiList, Context mContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.meiZiList = meiZiList;</div><div class="line">        <span class="keyword">this</span>.mContext = mContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(OnItemClickListener listener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.listener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MeiZiViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.item_meizi_list, parent, <span class="keyword">false</span>);</div><div class="line">        view.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MeiZiViewHolder(view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MeiZiViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        MeiZi meiZi = meiZiList.get(position);</div><div class="line">        Glide.with(mContext).load(meiZi.getMeiZiId()).into(holder.imageView);</div><div class="line">        holder.textView.setText(meiZi.getMeiZiName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> meiZiList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (listener == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        listener.OnItemClick(v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MeiZiViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        ImageView imageView;</div><div class="line">        TextView textView;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MeiZiViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            imageView = (ImageView) itemView.findViewById(R.id.image);</div><div class="line">            textView = (TextView) itemView.findViewById(R.id.text);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OnItemClick</span><span class="params">(View v)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Activity中部分代码</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><div class="line">...</div><div class="line">initMeiZi()<span class="comment">;</span></div><div class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.recycler_view)<span class="comment">;</span></div><div class="line">        mManager = new GridLayoutManager(this, <span class="number">2</span>)<span class="comment">;</span></div><div class="line">        mAdapter = new MeiZiAdapter(meiZiList, this)<span class="comment">;</span></div><div class="line">        mRecyclerView.setLayoutManager(mManager)<span class="comment">;</span></div><div class="line">        mAdapter.setOnItemClickListener(new MeiZiAdapter.OnItemClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void OnItemClick(View v) &#123;</div><div class="line">                Snackbar.make(v, <span class="string">"点击了第"</span> + mRecyclerView.getChildAdapterPosition(v) + <span class="string">"个"</span></div><div class="line">                        , Snackbar.LENGTH_SHORT).<span class="keyword">show();</span></div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;)<span class="comment">;</span></div><div class="line">        mRecyclerView.setAdapter(mAdapter)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initMeiZi() &#123;</div><div class="line">        meiZiList.clear()<span class="comment">;</span></div><div class="line">        for (int i = <span class="number">0</span><span class="comment">; i &lt; 30; i++) &#123;</span></div><div class="line">            <span class="built_in">Random</span> <span class="built_in">random</span> = new <span class="built_in">Random</span>()<span class="comment">;</span></div><div class="line">            int index = <span class="built_in">random</span>.nextInt(fruits.length)<span class="comment">;</span></div><div class="line">            meiZiList.<span class="keyword">add(fruits[index]);</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>运行</strong><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170426100941159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure> </p>
<p>妹子们还是挺好看的.不过咱们可爱的妹子们把咱们的ToolBar遮挡了…无奈,因为CoordinatorLayout本身是一个FrameLayout,怎么解决?用偏移量么?…不要,MD给我们提供了更好的解决办法</p>
<p>AppBarLayout<br>-</p>
<p>AppBarLayout是一个垂直的LinearLayout,用它来包裹一下ToolBar再设置一下属性即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/app_bar_layout"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;<span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;<span class="tag">&lt;/<span class="name">android.support.v7.widget.RecyclerView</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>app:layout_behavior=”@string/appbar_scrolling_view_behavior”<br>这个,咱们Ctrl点进去看看</p>
<string name="appbar_scrolling_view_behavior" translatable="false">android.support.design.widget.AppBarLayout$ScrollingViewBehavior</string>

</blockquote>
<p>这么着写,Recycler就会在ToolBar的下方了</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170426101002378?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<p>不过这还不是AppbarLayout真正炫酷的地方.它给他的子控件提供一个属性,可以让它随着列表的操作做出相应的操作</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">&lt;android<span class="selector-class">.support</span><span class="selector-class">.v7</span><span class="selector-class">.widget</span><span class="selector-class">.Toolbar</span></div><div class="line">                android:id=<span class="string">"@+id/toolbar"</span></div><div class="line">                android:layout_width=<span class="string">"match_parent"</span></div><div class="line">                android:layout_height=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                android:<span class="attribute">background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">                app:layout_scrollFlags=<span class="string">"scroll|enterAlways|snap"</span>&gt;&lt;/android<span class="selector-class">.support</span><span class="selector-class">.v7</span><span class="selector-class">.widget</span><span class="selector-class">.Toolbar</span>&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>app:layout_scrollFlags=”scroll|enterAlways|snap”&gt;</p>
</blockquote>
<p>说明一下</p>
<ul>
<li>scroll –&gt;当RecyclerView向上滚动时,Toolbar会跟着向上动</li>
<li>enterAlways –&gt;当RecyclerView向下滑动时.ToolBar会跟着向下动并显示</li>
<li>snap –&gt;当RecyclerView还没有完全隐藏或者显示的时候,自动判断ToolBar的显示状态</li>
</ul>
<p>大家可以自行运行一下</p>
<p>RecyclerView得刷新吧,下拉刷新,MD也给我们提供了一个组件,目前知乎掘金动用到了这个SwipeRefreshLayout</p>
<p>SwipeRefreshLayout<br>-<br>没啥解释的,代码才是王道</p>
<p>同样也是用它包裹RecyclerView,当然,RecyclerView的部分属性要移到SwipeRefreshLayout上来;</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">&lt;android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.widget</span><span class="selector-class">.SwipeRefreshLayout</span></div><div class="line">    android:id=<span class="string">"@+id/swipe_refresh_layout"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    app:layout_behavior=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line"></div><div class="line">    &lt;android<span class="selector-class">.support</span><span class="selector-class">.v7</span><span class="selector-class">.widget</span><span class="selector-class">.RecyclerView</span></div><div class="line">        android:id=<span class="string">"@+id/recycler_view"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"match_parent"</span>&gt;&lt;/android<span class="selector-class">.support</span><span class="selector-class">.v7</span><span class="selector-class">.widget</span><span class="selector-class">.RecyclerView</span>&gt;</div><div class="line">&lt;/android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.widget</span><span class="selector-class">.SwipeRefreshLayout</span>&gt;</div></pre></td></tr></table></figure>
<p>此时运行的话,会这样…</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170426101021006?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure>
<p>这个圈圈消失不掉.因为我们没有对这个SwipeRefreshLayout进行事件响应,下面我们开始写它的事件响应;</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><div class="line">mSwipeRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.swipe_refresh_layout);</div><div class="line"><span class="comment">//  轮询颜色</span></div><div class="line">mSwipeRefreshLayout.setColorSchemeResources(R.<span class="built_in">color</span>.colorAccent, R.<span class="built_in">color</span>.colorPrimary, R.<span class="built_in">color</span>.colorPrimaryDark);</div><div class="line">mSwipeRefreshLayout.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onRefresh() &#123;</div><div class="line">        initMeiZi();</div><div class="line">        mAdapter.notifyDataSetChanged();</div><div class="line">        mSwipeRefreshLayout.setRefreshing(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样就能消失了….简单吧,至于下拉加载更多,博主还没有找到适合MD规范的组件,不过这里提供一种实现方法,仅提供代码</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><div class="line">    mRecyclerView.addOnScrollListener(<span class="keyword">new</span> RecyclerView.OnScrollListener() &#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> onScrollStateChanged(RecyclerView recyclerView, <span class="built_in">int</span> newState) &#123;</div><div class="line">            <span class="keyword">super</span>.onScrollStateChanged(recyclerView, newState);</div><div class="line">            <span class="comment">//  newState RecyclerView的滑动状态</span></div><div class="line">            <span class="comment">//  0 滑动停止</span></div><div class="line">            <span class="comment">//  1 屏幕没停且手在屏幕上</span></div><div class="line">            <span class="comment">//  2 屏幕没停 惯性滑动</span></div><div class="line">            <span class="comment">//  当滑动停止并且屏幕最后一个可见的Item的pos+3大于等于ItemCount的时候 下载更多</span></div><div class="line">            <span class="keyword">if</span> (newState == RecyclerView.SCROLL_STATE_IDLE &amp;&amp; mManager.findLastVisibleItemPosition() + <span class="number">3</span> &gt;= mManager.getItemCount()) &#123;</div><div class="line">                initMeiZi(<span class="keyword">true</span>);</div><div class="line">                mAdapter.notifyDataSetChanged();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> initMeiZi(<span class="built_in">boolean</span> isLoadMore) &#123;</div><div class="line">    <span class="keyword">if</span> (!isLoadMore) &#123;</div><div class="line">        meiZiList.<span class="built_in">clear</span>();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</div><div class="line">        Random <span class="built_in">random</span> = <span class="keyword">new</span> Random();</div><div class="line">        <span class="built_in">int</span> index = <span class="built_in">random</span>.nextInt(meiZis.length);</div><div class="line">        meiZiList.<span class="built_in">add</span>(meiZis[index]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>…还剩一个CollapsingToolbarLayout了吧,那咱们就看看妹子的详情;-)</p>
<p>CollapsingToolbarLayout<br>-</p>
<p>配合ToolBar和AppBarLayout实现类似QQ空间的样式</p>
<p>###高能预警:!!!!!!下面也会有一长串代码,不想复制的童鞋可以直接跳过###<br><strong>具体是详情Act以及跳转的部分代码还有xml</strong></p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeiZiDetailAct</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Toolbar toolbar;</div><div class="line">    <span class="keyword">private</span> ImageView imageView;</div><div class="line">    <span class="keyword">private</span> TextView textView;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MeiZi meiZi;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">actionStart</span><span class="params">(Context context, MeiZi fruit)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(context, MeiZiDetailAct.class);</div><div class="line">        intent.putExtra(<span class="string">"MEI_ZI"</span>, fruit);</div><div class="line">        context.startActivity(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_meizi_detail);</div><div class="line">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        ActionBar actionBar = getSupportActionBar();</div><div class="line">        <span class="keyword">if</span> (actionBar != <span class="keyword">null</span>) &#123;</div><div class="line">            actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        imageView = (ImageView) findViewById(R.id.image);</div><div class="line">        textView = (TextView) findViewById(R.id.text);</div><div class="line"></div><div class="line">        meiZi = (MeiZi) getIntent().getSerializableExtra(<span class="string">"MEI_ZI"</span>);</div><div class="line">        <span class="keyword">if</span> (meiZi == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        Glide.with(<span class="keyword">this</span>).load(meiZi.getMeiZiId()).into(imageView);</div><div class="line"></div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</div><div class="line">            stringBuilder.append(meiZi.getMeiZiName() + <span class="string">"_ _"</span> + i + <span class="string">"_ _"</span>);</div><div class="line">        &#125;</div><div class="line">        textView.setText(stringBuilder);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">            <span class="keyword">case</span> android.R.id.home:</div><div class="line">                finish();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跳转部分</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><div class="line">mAdapter.setOnItemClickListener(<span class="keyword">new</span> MeiZiAdapter.OnItemClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">OnItemClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        MeiZiDetailAct.actionStart(MeiZiListAct.<span class="keyword">this</span>, meiZiList.get(mRecyclerView.getChildAdapterPosition(v)));</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/app_bar_layout"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"250dp"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_layout"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div><div class="line">            <span class="attr">app:contentScrim</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/image"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/card_view"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_marginBottom</span>=<span class="string">"15dp"</span></div><div class="line">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"15dp"</span></div><div class="line">                <span class="attr">android:layout_marginRight</span>=<span class="string">"15dp"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"35dp"</span></div><div class="line">                <span class="attr">app:cardCornerRadius</span>=<span class="string">"4dp"</span>&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span> /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/ic_menu_home"</span></div><div class="line">        <span class="attr">app:layout_anchor</span>=<span class="string">"@id/app_bar_layout"</span></div><div class="line">        <span class="attr">app:layout_anchorGravity</span>=<span class="string">"bottom|end"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个xml有点长,我简单说一下.<br>CollapsingToolbarLayout</p>
<ul>
<li>app:contentScrim=”@color/colorPrimary”    区域折叠以及折叠后 显示的颜色,CollapsingToolbarLayout折叠之后 就是一个ToolBar</li>
<li>app:layout_scrollFlags=”scroll|exitUntilCollapsed”之前见过,exitUntilCollapsed说的是当折叠完成 就停下 不再移出屏幕</li>
</ul>
<p>Image</p>
<ul>
<li>app:layout_collapseMode=”parallax” 指定它的折叠模式,只有CollapsingToolbarLayout子控件才有的属性, parallax意思是折叠过程中产生错位偏移</li>
<li>app:layout_collapseMode=”pin” 折叠过程中 形状不变</li>
</ul>
<p>最下面有一个NestedScrollView,可以响应滚动事件,因为只有滚动才能折叠,类似ScrollView但是ScrollView不支持响应滚动;</p>
<p>FloatingActionButton</p>
<ul>
<li>app:layout_anchor=”@id/app_bar_layout” 为FAB指定锚点,使其以锚点为基准显示</li>
<li>app:layout_anchorGravity=”bottom|end” 以锚点为基准显示的位置</li>
</ul>
<p>然后我们运行<br>图录制的不咋地<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20170426102821859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUmVkV29sZkNoYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">
                </div>
                <div class="image-caption">这里写图片描述</div>
            </figure></p>
<p>资源都在源码中,可能和本文格式上有点出入,但是代码大致相同;</p>
<p><a href="https://github.com/RedWolfChao/MaterialDesignDemo" target="_blank" rel="external">https://github.com/RedWolfChao/MaterialDesignDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反编译看的实在有点头疼,于是就仔细研究了一下前一段时间的一篇文章Material Design规范,发现这个东西2014年就出来了,为什么我今年才发现呢..无奈.于是乎,读书查资料,撸出一个Demo来;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Demo主要知识点&amp;lt;解释纯属个人见
    
    </summary>
    
    
      <category term="Material_Design" scheme="http://joryhe.coding.me/tags/Material-Design/"/>
    
  </entry>
  
</feed>
